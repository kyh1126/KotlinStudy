package _10_annotationAndReflection._1_annotation

// 사용 지점 대상(use-site target) : 애노테이션을 붙일 요소를 정할 수 있다.
// 1. property : 프로퍼티 전체, 자바에서 선언된 애노테이션에는 이 사용 지점 대상을 사용할 수 없다.
// 2. field : 프로퍼티에 의해 생성되는 (뒷받침하는) 필드
// 3. get/set : 프로퍼티 게터/세터
// 4. receiver : 확장 함수나 프로퍼티의 수신 객체 파라미터
// 5. param : 생성자 파라미터
// 6. setparam : 세터 파라미터
// 7. delegate : 위임 프로퍼티의 위임 인스턴스를 담아둔 필드
// 8. file : 파일 안에 선언된 최상위 함수와 프로퍼티를 담아두는 클래스
// file 대상을 사용하는 애노테이션은 package 선언 앞에서 파일의 최상위 수준에만 적용할 수 있다. ex> @file:JvmName("StringFunctions") 같은거.

//  사용지점대상  애노테이션 이름
//  @   get :   Rule        : get 은 @Rule 애노테이션을 프로퍼티 게터에 적용하라는 뜻.

// 규칙을 지정하려면 공개(public) 필드나 메소드 앞에 애노테이션을 붙여야 한다.
// 코틀린의 필드는 기본적으로 비공개이므로 예외가 발생하므로 @get:Rule 을 사용해야 한다.

// 자바에 선언된 애노테이션을 사용해 프로퍼티에 애노테이션을 붙이는 경우 기본적으로 프로퍼티의 필드에 그 애노테이션이 붙는다.
// 코틀린으로 애노테이션을 선언하면 프로퍼티에 직접 적용할 수 있는 애노테이션을 만들 수 있다.

// 자바 API 를 애노테이션으로 제어하기
// @JvmName : 코틀린 선언이 만들어내는 자바 필드나 메소드 이름을 변경한다.
// @JvmStatic : 메소드, 객체 선언, 동반 객체에 적용하면 그 요소가 자바 정적 메소드로 노출된다.
// @JvmOverloads : 디폴트 파라미터 값이 있는 함수에 대해 컴파일러가 자동으로 오버로딩한 함수를 생성해준다.
// @JvmField : 프로퍼티에 사용하면 게터나 세터가 없는 공개된(public) 자바 필드로 프로퍼티를 노출시킨다.